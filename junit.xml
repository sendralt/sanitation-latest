<?xml version="1.0" encoding="UTF-8"?>
<testsuites name="jest tests" tests="54" failures="11" errors="0" time="17.017">
  <testsuite name="Auth Utility Functions" errors="0" failures="0" skipped="0" timestamp="2025-08-10T22:22:11" time="1.404" tests="3">
    <testcase classname="Auth Utility Functions should correctly hash a password" name="Auth Utility Functions should correctly hash a password" time="0.183">
    </testcase>
    <testcase classname="Auth Utility Functions should correctly compare a plain password with a hashed password" name="Auth Utility Functions should correctly compare a plain password with a hashed password" time="0.288">
    </testcase>
    <testcase classname="Auth Utility Functions should return false for incorrect password comparison" name="Auth Utility Functions should return false for incorrect password comparison" time="0.275">
    </testcase>
  </testsuite>
  <testsuite name="Security Questions Utility Functions" errors="0" failures="0" skipped="0" timestamp="2025-08-10T22:22:11" time="1.527" tests="10">
    <testcase classname="Security Questions Utility Functions PREDEFINED_SECURITY_QUESTIONS should be an array with expected structure" name="Security Questions Utility Functions PREDEFINED_SECURITY_QUESTIONS should be an array with expected structure" time="0.009">
    </testcase>
    <testcase classname="Security Questions Utility Functions getSecurityQuestions should return a copy of questions without sensitive data" name="Security Questions Utility Functions getSecurityQuestions should return a copy of questions without sensitive data" time="0.002">
    </testcase>
    <testcase classname="Security Questions Utility Functions getSecurityQuestionById should return the correct question by ID" name="Security Questions Utility Functions getSecurityQuestionById should return the correct question by ID" time="0">
    </testcase>
    <testcase classname="Security Questions Utility Functions getSecurityQuestionById should return null for an invalid ID" name="Security Questions Utility Functions getSecurityQuestionById should return null for an invalid ID" time="0.001">
    </testcase>
    <testcase classname="Security Questions Utility Functions getSecurityQuestionById should handle string ID input" name="Security Questions Utility Functions getSecurityQuestionById should handle string ID input" time="0.001">
    </testcase>
    <testcase classname="Security Questions Utility Functions normalizeAnswer should trim whitespace and convert to lowercase" name="Security Questions Utility Functions normalizeAnswer should trim whitespace and convert to lowercase" time="0">
    </testcase>
    <testcase classname="Security Questions Utility Functions normalizeAnswer should return empty string for non-string input" name="Security Questions Utility Functions normalizeAnswer should return empty string for non-string input" time="0.001">
    </testcase>
    <testcase classname="Security Questions Utility Functions should correctly hash and compare a security answer" name="Security Questions Utility Functions should correctly hash and compare a security answer" time="0.329">
    </testcase>
    <testcase classname="Security Questions Utility Functions should return false for incorrect security answer comparison" name="Security Questions Utility Functions should return false for incorrect security answer comparison" time="0.268">
    </testcase>
    <testcase classname="Security Questions Utility Functions should handle case and whitespace insensitivity for answer comparison" name="Security Questions Utility Functions should handle case and whitespace insensitivity for answer comparison" time="0.256">
    </testcase>
  </testsuite>
  <testsuite name="scripts.js" errors="0" failures="0" skipped="0" timestamp="2025-08-10T22:22:11" time="1.623" tests="1">
    <testcase classname="scripts.js should add two numbers correctly" name="scripts.js should add two numbers correctly" time="0.197">
    </testcase>
  </testsuite>
  <testsuite name="Frontend Name Population" errors="0" failures="0" skipped="0" timestamp="2025-08-10T22:22:11" time="1.91" tests="10">
    <testcase classname="Frontend Name Population populateAssociateName function should populate name field when user data is available" name="Frontend Name Population populateAssociateName function should populate name field when user data is available" time="0.172">
    </testcase>
    <testcase classname="Frontend Name Population populateAssociateName function should not populate if user data is missing" name="Frontend Name Population populateAssociateName function should not populate if user data is missing" time="0.021">
    </testcase>
    <testcase classname="Frontend Name Population populateAssociateName function should not populate if firstName is missing" name="Frontend Name Population populateAssociateName function should not populate if firstName is missing" time="0.022">
    </testcase>
    <testcase classname="Frontend Name Population populateAssociateName function should not populate if lastName is missing" name="Frontend Name Population populateAssociateName function should not populate if lastName is missing" time="0.016">
    </testcase>
    <testcase classname="Frontend Name Population populateAssociateName function should not overwrite existing name field value" name="Frontend Name Population populateAssociateName function should not overwrite existing name field value" time="0.018">
    </testcase>
    <testcase classname="Frontend Name Population populateAssociateName function should handle empty string in name field as empty" name="Frontend Name Population populateAssociateName function should handle empty string in name field as empty" time="0.017">
    </testcase>
    <testcase classname="Frontend Name Population populateAssociateName function should treat whitespace-only value as empty and populate" name="Frontend Name Population populateAssociateName function should treat whitespace-only value as empty and populate" time="0.018">
    </testcase>
    <testcase classname="Frontend Name Population populateAssociateName function should do nothing if name field does not exist" name="Frontend Name Population populateAssociateName function should do nothing if name field does not exist" time="0.019">
    </testcase>
    <testcase classname="Frontend Name Population fetchAuthToken integration should call populateAssociateName after successful token fetch" name="Frontend Name Population fetchAuthToken integration should call populateAssociateName after successful token fetch" time="0.03">
    </testcase>
    <testcase classname="Frontend Name Population fetchAuthToken integration should not call populateAssociateName if fetch fails" name="Frontend Name Population fetchAuthToken integration should not call populateAssociateName if fetch fails" time="0.036">
    </testcase>
  </testsuite>
  <testsuite name="Models" errors="0" failures="0" skipped="0" timestamp="2025-08-10T22:22:11" time="2.28" tests="3">
    <testcase classname="Models Checklist Model should create a new checklist with valid data" name="Models Checklist Model should create a new checklist with valid data" time="0.113">
    </testcase>
    <testcase classname="Models Checklist Model should not create a checklist with missing required fields" name="Models Checklist Model should not create a checklist with missing required fields" time="0.083">
    </testcase>
    <testcase classname="Models Assignment Model should create a new assignment with valid data and associations" name="Models Assignment Model should create a new assignment with valid data and associations" time="0.209">
    </testcase>
  </testsuite>
  <testsuite name="assignNextChecklist" errors="0" failures="8" skipped="0" timestamp="2025-08-10T22:22:11" time="3.863" tests="8">
    <testcase classname="assignNextChecklist should assign a checklist to a user when one is available" name="assignNextChecklist should assign a checklist to a user when one is available" time="0.001">
      <failure>Error: 
    at Database.&lt;anonymous&gt; (/home/eh8180/sanitation-latest/dhl_login/node_modules/sequelize/src/dialects/sqlite/query.js:236:27)
    at /home/eh8180/sanitation-latest/dhl_login/node_modules/sequelize/src/dialects/sqlite/query.js:234:50
    at new Promise (&lt;anonymous&gt;)
    at Query.run (/home/eh8180/sanitation-latest/dhl_login/node_modules/sequelize/src/dialects/sqlite/query.js:234:12)
    at /home/eh8180/sanitation-latest/dhl_login/node_modules/sequelize/src/sequelize.js:650:28
    at SQLiteQueryInterface.dropTable (/home/eh8180/sanitation-latest/dhl_login/node_modules/sequelize/src/dialects/abstract/query-interface.js:265:5)
    at Function.drop (/home/eh8180/sanitation-latest/dhl_login/node_modules/sequelize/src/model.js:1448:12)
    at Function.sync (/home/eh8180/sanitation-latest/dhl_login/node_modules/sequelize/src/model.js:1346:7)
    at /home/eh8180/sanitation-latest/dhl_login/tests/assignment.test.js:18:5</failure>
    </testcase>
    <testcase classname="assignNextChecklist should return null when no checklist is available" name="assignNextChecklist should return null when no checklist is available" time="0.001">
      <failure>Error: 
    at Database.&lt;anonymous&gt; (/home/eh8180/sanitation-latest/dhl_login/node_modules/sequelize/src/dialects/sqlite/query.js:236:27)
    at /home/eh8180/sanitation-latest/dhl_login/node_modules/sequelize/src/dialects/sqlite/query.js:234:50
    at new Promise (&lt;anonymous&gt;)
    at Query.run (/home/eh8180/sanitation-latest/dhl_login/node_modules/sequelize/src/dialects/sqlite/query.js:234:12)
    at /home/eh8180/sanitation-latest/dhl_login/node_modules/sequelize/src/sequelize.js:650:28
    at SQLiteQueryInterface.dropTable (/home/eh8180/sanitation-latest/dhl_login/node_modules/sequelize/src/dialects/abstract/query-interface.js:265:5)
    at Function.drop (/home/eh8180/sanitation-latest/dhl_login/node_modules/sequelize/src/model.js:1448:12)
    at Function.sync (/home/eh8180/sanitation-latest/dhl_login/node_modules/sequelize/src/model.js:1346:7)
    at /home/eh8180/sanitation-latest/dhl_login/tests/assignment.test.js:18:5</failure>
    </testcase>
    <testcase classname="assignNextChecklist should assign the oldest unassigned checklist first" name="assignNextChecklist should assign the oldest unassigned checklist first" time="0">
      <failure>Error: 
    at Database.&lt;anonymous&gt; (/home/eh8180/sanitation-latest/dhl_login/node_modules/sequelize/src/dialects/sqlite/query.js:236:27)
    at /home/eh8180/sanitation-latest/dhl_login/node_modules/sequelize/src/dialects/sqlite/query.js:234:50
    at new Promise (&lt;anonymous&gt;)
    at Query.run (/home/eh8180/sanitation-latest/dhl_login/node_modules/sequelize/src/dialects/sqlite/query.js:234:12)
    at /home/eh8180/sanitation-latest/dhl_login/node_modules/sequelize/src/sequelize.js:650:28
    at SQLiteQueryInterface.dropTable (/home/eh8180/sanitation-latest/dhl_login/node_modules/sequelize/src/dialects/abstract/query-interface.js:265:5)
    at Function.drop (/home/eh8180/sanitation-latest/dhl_login/node_modules/sequelize/src/model.js:1448:12)
    at Function.sync (/home/eh8180/sanitation-latest/dhl_login/node_modules/sequelize/src/model.js:1346:7)
    at /home/eh8180/sanitation-latest/dhl_login/tests/assignment.test.js:18:5</failure>
    </testcase>
    <testcase classname="assignNextChecklist should not assign multiple assignments to the same user (mixed types)" name="assignNextChecklist should not assign multiple assignments to the same user (mixed types)" time="0">
      <failure>Error: 
    at Database.&lt;anonymous&gt; (/home/eh8180/sanitation-latest/dhl_login/node_modules/sequelize/src/dialects/sqlite/query.js:236:27)
    at /home/eh8180/sanitation-latest/dhl_login/node_modules/sequelize/src/dialects/sqlite/query.js:234:50
    at new Promise (&lt;anonymous&gt;)
    at Query.run (/home/eh8180/sanitation-latest/dhl_login/node_modules/sequelize/src/dialects/sqlite/query.js:234:12)
    at /home/eh8180/sanitation-latest/dhl_login/node_modules/sequelize/src/sequelize.js:650:28
    at SQLiteQueryInterface.dropTable (/home/eh8180/sanitation-latest/dhl_login/node_modules/sequelize/src/dialects/abstract/query-interface.js:265:5)
    at Function.drop (/home/eh8180/sanitation-latest/dhl_login/node_modules/sequelize/src/model.js:1448:12)
    at Function.sync (/home/eh8180/sanitation-latest/dhl_login/node_modules/sequelize/src/model.js:1346:7)
    at /home/eh8180/sanitation-latest/dhl_login/tests/assignment.test.js:18:5</failure>
    </testcase>
    <testcase classname="assignNextChecklist should NOT assign a new checklist if user already has an active assignment" name="assignNextChecklist should NOT assign a new checklist if user already has an active assignment" time="0">
      <failure>Error: 
    at Database.&lt;anonymous&gt; (/home/eh8180/sanitation-latest/dhl_login/node_modules/sequelize/src/dialects/sqlite/query.js:236:27)
    at /home/eh8180/sanitation-latest/dhl_login/node_modules/sequelize/src/dialects/sqlite/query.js:234:50
    at new Promise (&lt;anonymous&gt;)
    at Query.run (/home/eh8180/sanitation-latest/dhl_login/node_modules/sequelize/src/dialects/sqlite/query.js:234:12)
    at /home/eh8180/sanitation-latest/dhl_login/node_modules/sequelize/src/sequelize.js:650:28
    at SQLiteQueryInterface.dropTable (/home/eh8180/sanitation-latest/dhl_login/node_modules/sequelize/src/dialects/abstract/query-interface.js:265:5)
    at Function.drop (/home/eh8180/sanitation-latest/dhl_login/node_modules/sequelize/src/model.js:1448:12)
    at Function.sync (/home/eh8180/sanitation-latest/dhl_login/node_modules/sequelize/src/model.js:1346:7)
    at /home/eh8180/sanitation-latest/dhl_login/tests/assignment.test.js:18:5</failure>
    </testcase>
    <testcase classname="assignNextChecklist should assign a new checklist if user has completed their previous assignment" name="assignNextChecklist should assign a new checklist if user has completed their previous assignment" time="0">
      <failure>Error: 
    at Database.&lt;anonymous&gt; (/home/eh8180/sanitation-latest/dhl_login/node_modules/sequelize/src/dialects/sqlite/query.js:236:27)
    at /home/eh8180/sanitation-latest/dhl_login/node_modules/sequelize/src/dialects/sqlite/query.js:234:50
    at new Promise (&lt;anonymous&gt;)
    at Query.run (/home/eh8180/sanitation-latest/dhl_login/node_modules/sequelize/src/dialects/sqlite/query.js:234:12)
    at /home/eh8180/sanitation-latest/dhl_login/node_modules/sequelize/src/sequelize.js:650:28
    at SQLiteQueryInterface.dropTable (/home/eh8180/sanitation-latest/dhl_login/node_modules/sequelize/src/dialects/abstract/query-interface.js:265:5)
    at Function.drop (/home/eh8180/sanitation-latest/dhl_login/node_modules/sequelize/src/model.js:1448:12)
    at Function.sync (/home/eh8180/sanitation-latest/dhl_login/node_modules/sequelize/src/model.js:1346:7)
    at /home/eh8180/sanitation-latest/dhl_login/tests/assignment.test.js:18:5</failure>
    </testcase>
    <testcase classname="assignNextChecklist should NOT assign checklists to admin users" name="assignNextChecklist should NOT assign checklists to admin users" time="0">
      <failure>Error: 
    at Database.&lt;anonymous&gt; (/home/eh8180/sanitation-latest/dhl_login/node_modules/sequelize/src/dialects/sqlite/query.js:236:27)
    at /home/eh8180/sanitation-latest/dhl_login/node_modules/sequelize/src/dialects/sqlite/query.js:234:50
    at new Promise (&lt;anonymous&gt;)
    at Query.run (/home/eh8180/sanitation-latest/dhl_login/node_modules/sequelize/src/dialects/sqlite/query.js:234:12)
    at /home/eh8180/sanitation-latest/dhl_login/node_modules/sequelize/src/sequelize.js:650:28
    at SQLiteQueryInterface.dropTable (/home/eh8180/sanitation-latest/dhl_login/node_modules/sequelize/src/dialects/abstract/query-interface.js:265:5)
    at Function.drop (/home/eh8180/sanitation-latest/dhl_login/node_modules/sequelize/src/model.js:1448:12)
    at Function.sync (/home/eh8180/sanitation-latest/dhl_login/node_modules/sequelize/src/model.js:1346:7)
    at /home/eh8180/sanitation-latest/dhl_login/tests/assignment.test.js:18:5</failure>
    </testcase>
    <testcase classname="getCurrentAssignments date filtering should filter assignments by date range" name="getCurrentAssignments date filtering should filter assignments by date range" time="0.014">
      <failure>Error: ConnectionManager.getConnection was called after the connection manager was closed!
    at ConnectionManager.getConnection (/home/eh8180/sanitation-latest/dhl_login/node_modules/sequelize/src/dialects/abstract/connection-manager.js:113:13)
    at /home/eh8180/sanitation-latest/dhl_login/node_modules/sequelize/src/sequelize.js:638:111
    at /home/eh8180/sanitation-latest/dhl_login/node_modules/retry-as-promised/dist/index.js:65:25
    at new Promise (&lt;anonymous&gt;)
    at retryAsPromised (/home/eh8180/sanitation-latest/dhl_login/node_modules/retry-as-promised/dist/index.js:54:12)
    at Sequelize.query (/home/eh8180/sanitation-latest/dhl_login/node_modules/sequelize/src/sequelize.js:631:12)
    at SQLiteQueryInterface.insert (/home/eh8180/sanitation-latest/dhl_login/node_modules/sequelize/src/dialects/abstract/query-interface.js:795:42)
    at User.save (/home/eh8180/sanitation-latest/dhl_login/node_modules/sequelize/src/model.js:4154:73)
    at Function.create (/home/eh8180/sanitation-latest/dhl_login/node_modules/sequelize/src/model.js:2305:12)
    at Object.&lt;anonymous&gt; (/home/eh8180/sanitation-latest/dhl_login/tests/assignment.test.js:275:13)</failure>
    </testcase>
  </testsuite>
  <testsuite name="Manual Assignment Feature" errors="0" failures="3" skipped="0" timestamp="2025-08-10T22:22:11" time="15.381" tests="19">
    <testcase classname="Manual Assignment Feature manuallyAssignChecklist should successfully assign checklist to user" name="Manual Assignment Feature manuallyAssignChecklist should successfully assign checklist to user" time="0.588">
    </testcase>
    <testcase classname="Manual Assignment Feature manuallyAssignChecklist should fail with missing required parameters" name="Manual Assignment Feature manuallyAssignChecklist should fail with missing required parameters" time="0.54">
    </testcase>
    <testcase classname="Manual Assignment Feature manuallyAssignChecklist should fail with invalid UUID format" name="Manual Assignment Feature manuallyAssignChecklist should fail with invalid UUID format" time="0.495">
    </testcase>
    <testcase classname="Manual Assignment Feature manuallyAssignChecklist should fail when admin user does not exist" name="Manual Assignment Feature manuallyAssignChecklist should fail when admin user does not exist" time="0.458">
      <failure>Error: expect(received).toBe(expected) // Object.is equality

Expected: &quot;Admin user not found&quot;
Received: &quot;Invalid adminUserId format&quot;
    at Object.&lt;anonymous&gt; (/home/eh8180/sanitation-latest/dhl_login/tests/manualAssignment.test.js:150:28)</failure>
    </testcase>
    <testcase classname="Manual Assignment Feature manuallyAssignChecklist should fail when admin user is not actually admin" name="Manual Assignment Feature manuallyAssignChecklist should fail when admin user is not actually admin" time="0.46">
    </testcase>
    <testcase classname="Manual Assignment Feature manuallyAssignChecklist should fail when target user does not exist" name="Manual Assignment Feature manuallyAssignChecklist should fail when target user does not exist" time="0.469">
      <failure>Error: expect(received).toBe(expected) // Object.is equality

Expected: &quot;Target user not found&quot;
Received: &quot;Invalid userId format&quot;
    at Object.&lt;anonymous&gt; (/home/eh8180/sanitation-latest/dhl_login/tests/manualAssignment.test.js:173:28)</failure>
    </testcase>
    <testcase classname="Manual Assignment Feature manuallyAssignChecklist should fail when trying to assign to admin user" name="Manual Assignment Feature manuallyAssignChecklist should fail when trying to assign to admin user" time="0.523">
    </testcase>
    <testcase classname="Manual Assignment Feature manuallyAssignChecklist should fail when admin tries to assign to themselves" name="Manual Assignment Feature manuallyAssignChecklist should fail when admin tries to assign to themselves" time="0.533">
    </testcase>
    <testcase classname="Manual Assignment Feature manuallyAssignChecklist should fail when checklist does not exist" name="Manual Assignment Feature manuallyAssignChecklist should fail when checklist does not exist" time="0.46">
      <failure>Error: expect(received).toBe(expected) // Object.is equality

Expected: &quot;Checklist not found&quot;
Received: &quot;Invalid checklistId format&quot;
    at Object.&lt;anonymous&gt; (/home/eh8180/sanitation-latest/dhl_login/tests/manualAssignment.test.js:233:28)</failure>
    </testcase>
    <testcase classname="Manual Assignment Feature manuallyAssignChecklist should fail when user already has active assignment without override" name="Manual Assignment Feature manuallyAssignChecklist should fail when user already has active assignment without override" time="0.636">
    </testcase>
    <testcase classname="Manual Assignment Feature manuallyAssignChecklist should succeed when overriding existing assignment" name="Manual Assignment Feature manuallyAssignChecklist should succeed when overriding existing assignment" time="0.996">
    </testcase>
    <testcase classname="Manual Assignment Feature manuallyAssignChecklist should prevent assigning same checklist that is already active" name="Manual Assignment Feature manuallyAssignChecklist should prevent assigning same checklist that is already active" time="0.729">
    </testcase>
    <testcase classname="Manual Assignment Feature manuallyAssignChecklist should put cancelled checklist back into assignment queue" name="Manual Assignment Feature manuallyAssignChecklist should put cancelled checklist back into assignment queue" time="1.101">
    </testcase>
    <testcase classname="Manual Assignment Feature manuallyAssignChecklist should remove cancelled assignments from user dashboard" name="Manual Assignment Feature manuallyAssignChecklist should remove cancelled assignments from user dashboard" time="0.964">
    </testcase>
    <testcase classname="Manual Assignment Feature getAssignableUsers should return only non-admin users" name="Manual Assignment Feature getAssignableUsers should return only non-admin users" time="0.555">
    </testcase>
    <testcase classname="Manual Assignment Feature getAvailableChecklists should return all checklists when no type filter" name="Manual Assignment Feature getAvailableChecklists should return all checklists when no type filter" time="0.517">
    </testcase>
    <testcase classname="Manual Assignment Feature getAvailableChecklists should filter checklists by type" name="Manual Assignment Feature getAvailableChecklists should filter checklists by type" time="0.563">
    </testcase>
    <testcase classname="Manual Assignment Feature getCurrentAssignments should return assignments with proper associations" name="Manual Assignment Feature getCurrentAssignments should return assignments with proper associations" time="0.635">
    </testcase>
    <testcase classname="Manual Assignment Feature getCurrentAssignments should filter assignments by status" name="Manual Assignment Feature getCurrentAssignments should filter assignments by status" time="0.952">
    </testcase>
  </testsuite>
</testsuites>